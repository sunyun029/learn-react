[{"E:\\learn-react\\src\\index.js":"1"},{"size":9712,"mtime":1616721884807,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"9el1vv","E:\\learn-react\\src\\index.js",["7","8","9","10","11","12"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nclass Clock extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      date: new Date(),\r\n      posts:[],\r\n      comments:[]\r\n    };\r\n  }\r\n//生命周期方法\r\n  componentDidMount() {\r\n    this.timerID = setInterval( \r\n      ()=> this.tick(),\r\n      1000\r\n    );\r\n    // fetchPosts().then(response => {\r\n    //   this.setState({ \r\n    //     posts: response.posts\r\n    //   });\r\n    // });\r\n\r\n    // fetchComments().then(response => {\r\n    //   this.setState({\r\n    //     comments: response.comments\r\n    //   });\r\n    // });\r\n    //这里的合并是浅合并，所以 this.setState({comments}) 完整保留了 this.state.posts \r\n    //但是完全替换了 this.state.comments\r\n  }\r\n\r\n  componentWillUnmount() {\r\n   clearInterval(this.timerID);\r\n  }\r\n  tick(){\r\n    this.setState({\r\n      date: new Date()  \r\n    },\r\n    )\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>Hello, world!</p>\r\n        <p>It is {this.state.date.toLocaleTimeString()}.</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n//浅比较\r\nclass CounterButton extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {count: 1};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button\r\n        color={this.props.color}\r\n        onClick={() => this.setState(state => ({count: state.count + 1}))}>\r\n        Count: {this.state.count}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n//直接将所有的 state 状态数据存储在 Board 父组件当中。之后 Board 组件可以将这些数据通过 props 传递给各个 Square 子组件\r\nclass Square extends React.Component {\r\n  //向 class 中添加一个构造函数，用来初始化 state\r\n  constructor(props) {\r\n    //在 JavaScript class 中，每次你定义其子类的构造函数时，都需要调用 super 方法\r\n    //因此，在所有含有构造函数的的 React 组件中，构造函数必须以 super(props) 开头\r\n    super(props);\r\n    this.state = {\r\n      value : null,\r\n    };\r\n  }\r\n  render() {\r\n    return (//从 Board 组件向 Square 组件中传递两个 props 参数：value 和 onClick\r\n      <button \r\n        className=\"square\" \r\n        onClick={() => this.props.onClick()}\r\n      >\r\n        {this.props.value}\r\n      </button>\r\n      //在 React 应用中，数据通过 props 的传递，从父组件流向子组件\r\n    );\r\n  }\r\n}\r\n\r\nclass Board extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      squares: Array(9).fill(null),\r\n      xIsNext: true,\r\n    }\r\n  }\r\n  handleClick(i) {\r\n    const squares = this.state.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n    this.setState({\r\n      squares: squares,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n  renderSquare(i) {\r\n    return (\r\n      <Square \r\n        value={this.state.squares[i]} \r\n        onClick={() => this.handleClick(i)}\r\n      />\r\n    )\r\n     //一个 prop 从父组件 Board “传递”给了子组件 Square\r\n     //为了提高可读性，我们把返回的 React 元素拆分成了多行，同时在最外层加了小括号\r\n     //这样 JavaScript 解析的时候就不会在 return 的后面自动插入一个分号从而破坏代码结构了\r\n     \r\n  }\r\n\r\n  render() {\r\n    const winner = calculateWinner(this.state.squares);\r\n    let status;\r\n    if (winner) {\r\n      status = \"Winner:\" + winner;\r\n    } else {\r\n      status = 'Next player:' + (this.state.xIsNext ? 'X' : 'O');\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"status\">{status}</div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst user = {\r\n  firstName:'Happer',\r\n  lastName:'Peraz',\r\n  avatarUrl:\"http://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png\"\r\n};\r\n// const element = (\r\n//   getGreeting(user)\r\n// );\r\nfunction formatName(user){\r\n  return user.firstName+' '+user.lastName;\r\n}\r\nfunction getGreeting(user){\r\n  if(user){\r\n    return<h1> hello,{formatName(user)}!</h1>\r\n  }\r\n  return <h1>hello,stranger.</h1>\r\n}\r\n//事件处理\r\nfunction ActionLink() {\r\n  function handleClick(e) {\r\n    e.preventDefault();\r\n    console.log('The link was clicked.');\r\n  }\r\n\r\n  return (\r\n    <a href=\"#\" onClick={handleClick}>\r\n      Click me\r\n    </a>\r\n  );\r\n}\r\n// const element = (\r\n//   <div> \r\n//     <img src={user.avatarUrl} />\r\n//     <h1>Hello!</h1>\r\n//     <h2>Good to see you here.</h2>\r\n// </div>\r\n// );\r\n// function tick() {\r\n//   const element = (\r\n//     <div>\r\n//       <h1>Hello, world!</h1>\r\n//       <h2>It is {new Date().toLocaleTimeString()}.</h2>\r\n//     </div>\r\n//   );\r\n//   ReactDOM.render(element, document.getElementById('root'));\r\n// }\r\n\r\n// setInterval(tick, 1000);\r\n\r\nfunction Welcome(props) {\r\n  return <h5>Hello, {props.name}</h5>;\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Welcome name=\"Sara\" />\r\n      <Welcome name=\"Cahal\" />\r\n      <Welcome name=\"Edite\" />\r\n    </div>\r\n  );\r\n}\r\nfunction formatDate(date) {\r\n  return date.toLocaleDateString();\r\n}\r\n//组件构建过程↓\r\nfunction Avatar(props) {\r\n  return (\r\n    <img className=\"Avatar\"\r\n      src={props.user.avatarUrl}\r\n      alt={props.user.name}\r\n    />\r\n  );\r\n}\r\nfunction UserInfo(props) {\r\n  return (\r\n    <div className=\"UserInfo\">\r\n      <Avatar user={props.user} />\r\n      <div className=\"UserInfo-name\">\r\n        {props.user.name}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Comment(props){\r\n  var myStyle = {\r\n    fontSize: 30,\r\n    color: '#61DAFB'\r\n  };\r\n  var arr = [\r\n    <h4>react教程</h4>,\r\n    <h5>学的不仅是技术，更是梦想！</h5>,\r\n  ];\r\n  return(\r\n    <div className=\"Comment\">\r\n      <h2 style={myStyle}>learn-react</h2>\r\n      <div className=\"list\">{arr}</div>\r\n      <ActionLink/>\r\n      <Clock/>\r\n      <CounterButton/>\r\n      <UserInfo user= {props.author}/>\r\n      <div className=\"Comment-text\">\r\n        {props.text}\r\n      </div>\r\n      <div className=\"Comment-date\">\r\n        {formatDate(props.date)}\r\n      </div>\r\n      <Clock/>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst comment = {\r\n  date: new Date(),\r\n  text: 'I hope you enjoy learning React!',\r\n  author: {\r\n    name: 'Hello Kitty',\r\n    avatarUrl: 'https://placekitten.com/g/64/64',\r\n  },\r\n};\r\nReactDOM.render(\r\n  // <Clock />,\r\n  <Comment\r\n    date={comment.date}\r\n    text={comment.text}\r\n    author={comment.author}\r\n  />,\r\n  document.getElementById('root')\r\n);\r\n// These two containers are siblings in the DOM\r\nconst appRoot = document.getElementById('app-root');\r\nconst modalRoot = document.getElementById('modal-root');\r\n\r\n\r\nclass Modal extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.el = document.createElement('div');\r\n  }\r\n\r\n  componentDidMount() {\r\n    modalRoot.appendChild(this.el);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    modalRoot.removeChild(this.el);\r\n  }\r\n  \r\n  render() {\r\n    return ReactDOM.createPortal(\r\n      this.props.children,\r\n      this.el,\r\n    );\r\n  }\r\n}\r\n\r\nclass Parent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {clicks: 0};\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick() {\r\n    // This will fire when the button in Child is clicked,\r\n    // updating Parent's state, even though button\r\n    // is not direct descendant in the DOM. \r\n    this.setState(prevState => ({\r\n      clicks: prevState.clicks + 1\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div onClick={this.handleClick}>\r\n        <p>Number of clicks: {this.state.clicks}</p>\r\n        <p>\r\n          Open up the browser DevTools\r\n          to observe that the button\r\n          is not a child of the div\r\n          with the onClick handler.\r\n        </p>\r\n        <Modal>\r\n          <Child />\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction Child() {\r\n  // The click event on this button will bubble up to parent,\r\n  // because there is no 'onClick' attribute defined\r\n  return (\r\n    <div className=\"modal\">\r\n      <button>Click</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nReactDOM.render(<Parent />, appRoot);\r\nfunction Sara() {\r\n  return (\r\n    <div>\r\n      Sara\r\n      <div className=\"aa\">菜鸟教程</div>\r\n      <div style={{height: 50}}>菜鸟教程</div>,\r\n    </div>\r\n  );\r\n}\r\nconst element = <Welcome name=\"Sara\" />;\r\n// ReactDOM.render(\r\n//   element,\r\n//   document.getElementById('root')\r\n// );\r\n// ========================================\r\nReactDOM.render(\r\n  <Sara/>,\r\n  // <Niuke/>,\r\n  document.getElementById('test')\r\n);\r\n// ReactDOM.render(\r\n//   element,\r\n//   <Game />,\r\n//   document.getElementById('root')\r\n// );\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n",{"ruleId":"13","severity":1,"message":"14","line":93,"column":7,"nodeType":"15","messageId":"16","endLine":93,"endColumn":12},{"ruleId":"13","severity":1,"message":"17","line":157,"column":7,"nodeType":"15","messageId":"16","endLine":157,"endColumn":11},{"ruleId":"13","severity":1,"message":"18","line":168,"column":10,"nodeType":"15","messageId":"16","endLine":168,"endColumn":21},{"ruleId":"19","severity":1,"message":"20","line":182,"column":5,"nodeType":"21","endLine":182,"endColumn":39},{"ruleId":"13","severity":1,"message":"22","line":210,"column":10,"nodeType":"15","messageId":"16","endLine":210,"endColumn":13},{"ruleId":"13","severity":1,"message":"23","line":368,"column":7,"nodeType":"15","messageId":"16","endLine":368,"endColumn":14},"no-unused-vars","'Board' is defined but never used.","Identifier","unusedVar","'user' is assigned a value but never used.","'getGreeting' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'App' is defined but never used.","'element' is assigned a value but never used."]