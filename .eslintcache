[{"E:\\learn-react\\src\\index.js":"1"},{"size":9204,"mtime":1612336428315,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"9el1vv","E:\\learn-react\\src\\index.js",["7","8","9","10","11"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: new Date(),\n      posts:[],\n      comments:[]\n    };\n  }\n//生命周期方法\n  componentDidMount() {\n    this.timerID = setInterval( \n      ()=> this.tick(),\n      1000\n    );\n    // fetchPosts().then(response => {\n    //   this.setState({ \n    //     posts: response.posts\n    //   });\n    // });\n\n    // fetchComments().then(response => {\n    //   this.setState({\n    //     comments: response.comments\n    //   });\n    // });\n    //这里的合并是浅合并，所以 this.setState({comments}) 完整保留了 this.state.posts \n    //但是完全替换了 this.state.comments\n  }\n\n  componentWillUnmount() {\n   clearInterval(this.timerID);\n  }\n  tick(){\n    this.setState({\n      date: new Date()  \n    },\n    )\n  }\n  render() {\n    return (\n      <div>\n        <p>Hello, world!</p>\n        <p>It is {this.state.date.toLocaleTimeString()}.</p>\n      </div>\n    );\n  }\n}\n//浅比较\nclass CounterButton extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {count: 1};\n  }\n\n  render() {\n    return (\n      <button\n        color={this.props.color}\n        onClick={() => this.setState(state => ({count: state.count + 1}))}>\n        Count: {this.state.count}\n      </button>\n    );\n  }\n}\n//直接将所有的 state 状态数据存储在 Board 父组件当中。之后 Board 组件可以将这些数据通过 props 传递给各个 Square 子组件\nclass Square extends React.Component {\n  //向 class 中添加一个构造函数，用来初始化 state\n  constructor(props) {\n    //在 JavaScript class 中，每次你定义其子类的构造函数时，都需要调用 super 方法\n    //因此，在所有含有构造函数的的 React 组件中，构造函数必须以 super(props) 开头\n    super(props);\n    this.state = {\n      value : null,\n    };\n  }\n  render() {\n    return (//从 Board 组件向 Square 组件中传递两个 props 参数：value 和 onClick\n      <button \n        className=\"square\" \n        onClick={() => this.props.onClick()}\n      >\n        {this.props.value}\n      </button>\n      //在 React 应用中，数据通过 props 的传递，从父组件流向子组件\n    );\n  }\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      squares: Array(9).fill(null),\n      xIsNext: true,\n    }\n  }\n  handleClick(i) {\n    const squares = this.state.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n  renderSquare(i) {\n    return (\n      <Square \n        value={this.state.squares[i]} \n        onClick={() => this.handleClick(i)}\n      />\n    )\n     //一个 prop 从父组件 Board “传递”给了子组件 Square\n     //为了提高可读性，我们把返回的 React 元素拆分成了多行，同时在最外层加了小括号\n     //这样 JavaScript 解析的时候就不会在 return 的后面自动插入一个分号从而破坏代码结构了\n     \n  }\n\n  render() {\n    const winner = calculateWinner(this.state.squares);\n    let status;\n    if (winner) {\n      status = \"Winner:\" + winner;\n    } else {\n      status = 'Next player:' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return (\n      <div>\n        <div className=\"status\">{status}</div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board />\n        </div>\n        <div className=\"game-info\">\n          <div>{/* status */}</div>\n          <ol>{/* TODO */}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst user = {\n  firstName:'Happer',\n  lastName:'Peraz',\n  avatarUrl:\"http://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png\"\n};\n// const element = (\n//   getGreeting(user)\n// );\nfunction formatName(user){\n  return user.firstName+' '+user.lastName;\n}\nfunction getGreeting(user){\n  if(user){\n    return<h1> hello,{formatName(user)}!</h1>\n  }\n  return <h1>hello,stranger.</h1>\n}\n//事件处理\nfunction ActionLink() {\n  function handleClick(e) {\n    e.preventDefault();\n    console.log('The link was clicked.');\n  }\n\n  return (\n    <a href=\"#\" onClick={handleClick}>\n      Click me\n    </a>\n  );\n}\n// const element = (\n//   <div> \n//     <img src={user.avatarUrl} />\n//     <h1>Hello!</h1>\n//     <h2>Good to see you here.</h2>\n// </div>\n// );\n// function tick() {\n//   const element = (\n//     <div>\n//       <h1>Hello, world!</h1>\n//       <h2>It is {new Date().toLocaleTimeString()}.</h2>\n//     </div>\n//   );\n//   ReactDOM.render(element, document.getElementById('root'));\n// }\n\n// setInterval(tick, 1000);\n\nfunction Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n\nfunction App() {\n  return (\n    <div>\n      <Welcome name=\"Sara\" />\n      <Welcome name=\"Cahal\" />\n      <Welcome name=\"Edite\" />\n    </div>\n  );\n}\nfunction formatDate(date) {\n  return date.toLocaleDateString();\n}\n//组件构建过程↓\nfunction Avatar(props) {\n  return (\n    <img className=\"Avatar\"\n      src={props.user.avatarUrl}\n      alt={props.user.name}\n    />\n  );\n}\nfunction UserInfo(props) {\n  return (\n    <div className=\"UserInfo\">\n      <Avatar user={props.user} />\n      <div className=\"UserInfo-name\">\n        {props.user.name}\n      </div>\n    </div>\n  );\n}\n\nfunction Comment(props){\n  return(\n    <div className=\"Comment\">\n      <ActionLink/>\n      <Clock/>\n      <CounterButton/>\n      <UserInfo user= {props.author}/>\n      <div className=\"Comment-text\">\n        {props.text}\n      </div>\n      <div className=\"Comment-date\">\n        {formatDate(props.date)}\n      </div>\n      <Clock/>\n    </div>\n  );\n}\nconst comment = {\n  date: new Date(),\n  text: 'I hope you enjoy learning React!',\n  author: {\n    name: 'Hello Kitty',\n    avatarUrl: 'https://placekitten.com/g/64/64',\n  },\n};\nReactDOM.render(\n  // <Clock />,\n  <Comment\n    date={comment.date}\n    text={comment.text}\n    author={comment.author}\n  />,\n  document.getElementById('root')\n);\n// These two containers are siblings in the DOM\nconst appRoot = document.getElementById('app-root');\nconst modalRoot = document.getElementById('modal-root');\n\nclass Modal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.el = document.createElement('div');\n  }\n\n  componentDidMount() {\n    modalRoot.appendChild(this.el);\n  }\n\n  componentWillUnmount() {\n    modalRoot.removeChild(this.el);\n  }\n  \n  render() {\n    return ReactDOM.createPortal(\n      this.props.children,\n      this.el,\n    );\n  }\n}\n\nclass Parent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {clicks: 0};\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    // This will fire when the button in Child is clicked,\n    // updating Parent's state, even though button\n    // is not direct descendant in the DOM. \n    this.setState(prevState => ({\n      clicks: prevState.clicks + 1\n    }));\n  }\n\n  render() {\n    return (\n      <div onClick={this.handleClick}>\n        <p>Number of clicks: {this.state.clicks}</p>\n        <p>\n          Open up the browser DevTools\n          to observe that the button\n          is not a child of the div\n          with the onClick handler.\n        </p>\n        <Modal>\n          <Child />\n        </Modal>\n      </div>\n    );\n  }\n}\n\nfunction Child() {\n  // The click event on this button will bubble up to parent,\n  // because there is no 'onClick' attribute defined\n  return (\n    <div className=\"modal\">\n      <button>Click</button>\n    </div>\n  );\n}\n\nReactDOM.render(<Parent />, appRoot);\n\n// const element = <Welcome name=\"Sara\" />;\n// ReactDOM.render(\n//   element,\n//   document.getElementById('root')\n// );\n// ========================================\n// ReactDOM.render(\n//   element,\n//   document.getElementById('root')\n// );\n// ReactDOM.render(\n//   element,\n//   <Game />,\n//   document.getElementById('root')\n// );\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n",{"ruleId":"12","severity":1,"message":"13","line":157,"column":7,"nodeType":"14","messageId":"15","endLine":157,"endColumn":11},{"ruleId":"12","severity":1,"message":"16","line":173,"column":7,"nodeType":"14","messageId":"15","endLine":173,"endColumn":11},{"ruleId":"12","severity":1,"message":"17","line":184,"column":10,"nodeType":"14","messageId":"15","endLine":184,"endColumn":21},{"ruleId":"18","severity":1,"message":"19","line":198,"column":5,"nodeType":"20","endLine":198,"endColumn":39},{"ruleId":"12","severity":1,"message":"21","line":226,"column":10,"nodeType":"14","messageId":"15","endLine":226,"endColumn":13},"no-unused-vars","'Game' is defined but never used.","Identifier","unusedVar","'user' is assigned a value but never used.","'getGreeting' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'App' is defined but never used."]